module strongbrew::core::core;

//pub extern "Java" fn while(cond: fn () (), body: fn () ()) = "while (cond.run()) { body.run(); }";

//pub extern "Java" fn I64::for(start: i64, end: i64, body: fn () (i64)) = "for (int i = start; i < end; i++) { body.run(i); }";

pub extern "Java" fn print(string: String) = "
    java.lang.System.out.print(string);
"
pub extern "Java" fn println(string: String) = "
    java.lang.System.out.println(string);
"

pub extern "Java" fn I8::show(n: i8) -> String = "
    return Byte.toString(n);
"

pub extern "Java" fn I16::show(n: i16) -> String = "
    return Short.toString(n);
"

pub extern "Java" fn I32::show(n: i32) -> String = "
    return Integer.toString(n);
"

pub extern "Java" fn I64::show(n: i64) -> String = "
    return Long.toString(n);
"

pub extern "Java" fn Natural::show(n: nat) -> String = "
    return n.toString();
"

pub extern "Java" fn Number::show(n: int) -> String = "
    return n.toString();
"

pub extern "Java" fn I8::(+)(x: i8, y: i8) -> i8 = "
    return (byte)(x + y);
"

pub extern "Java" fn I16::(+)(x: i16, y: i16) -> i16  = "
    return (short)(x + y);
"

pub extern "Java" fn I32::(+)(x: i32, y: i32) -> i32 = "
    return x + y;
"

pub extern "Java" fn I64::(+)(x: i64, y: i64) -> i64 = "
    return x + y;
"

pub extern "Java" fn Natural::(+)(x: nat, y: nat) -> nat = "
    return (Nat)x.add(y);
"

pub extern "Java" fn Number::(+)(x: int, y: int) -> int = "
    return (Int)(x.add(y));
"
