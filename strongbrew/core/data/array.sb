module strongbrew::core::data::array;


/*pub extern "Java" fn (++)[T: type](x: Array[T, n], y: Array[T, m] ) -> Array[T, n + m] = "
    T[] result = Arrays.copyOf(x, x.length + y.length);
    System.arraycopy(y, 0, result, x.length, y.length);
    return result;
"*/
pub extern "Java" fn I32::(get[])[T: type](x: Array[T, n], y: i32) -> T = "
    return x[y];
"

pub extern "Java" fn I64::(get[])[T: type](x: Array[T, n], y: i64) -> T = "
    return x[(int)y];
"

pub extern "Java" fn Natural::(get[])[T: type](x: Array[T, n], y: nat) -> T = "
    return x[y.intValue()];
"

pub extern "Java" fn Number::(get[])[T: type](x: Array[T, n], y: int) -> T = "
    return x[y.intValue()];
"

pub extern "Java" fn I32::(set[])[T: type](x: mut Array[T, n], y: i32, value: T) = "
    x.get()[y] = value;
"

pub extern "Java" fn I64::(set[])[T: type](x: mut Array[T, n], y: i64, value: T) = "
    x.get()[(int)y] = value;
"


pub extern "Java" fn map[A,B](l: Array[A, n], f: fn B (A)) -> Array[B, n] = "
    B[] output = (B[])new Object[l.length];
    for (int i = 0; i < l.length; i++) {
        output[i] = f.call(l[i]);
    }
    return output;
"

pub extern "Java" fn foldl[A,B](l: Array[A, _], acc: B, f: fn B (A, B)) -> B = "
    B output = acc;
    for (A item : l) {
        output = f.call(item, output);
    }
    return output;
"

pub extern "Java" fn foldr[A,B](l: Array[A, _], acc: B, f: fn B (A, B)) -> B = "
    B output = acc;
    for (int i = l.length - 1; i > -1; i--) {
        output = f.call(l[i], output);
    }
    return output;
"

pub extern "Java" fn concat[T](l: Array[Array[T, _], _]) -> Array[T, _] = "
    int length = 0;
    for (T[] out : l) {
        length += out.length;
    }
    T[] output = (T[])new Object[length];
    int index = 0;
    for (T[] out : l) {
        for (T item : out) {
            output[index] = item;
            index += 1;
        }
    }
    return output;
"

pub extern "Java" fn and(l: Array[bool, _]) -> bool = "
    boolean result = true;
    for (boolean b : l) {
        result = result && b;
    }
    return result;
"

pub extern "Java" fn or(l: Array[bool, _]) -> bool = "
    boolean result = false;
    for (boolean b : l) {
        result = result || b;
    }
    return result;
"

pub extern "Java" fn any[T](l: Array[T, _], f: fn bool (T)) -> bool = "
    boolean result = false;
    for (T item : l) {
        result = result || f.call(item);
        if (result) {
            return result;
        }
    }
    return result;
"

pub extern "Java" fn all[T](l: Array[T, _], f: fn bool (T)) -> bool = "
    boolean result = true;
    for (T item : l) {
        result = result && f.call(item);
        if (!result) {
            return result;
        }
    }
    return result;
"

pub extern "Java" fn Natural::sum(l: Array[nat, _]) -> nat = "
    Nat result = new Nat(0);
    for (Nat item : l) {
        result = (Nat)result.add(item);
    }
    return result;
"

pub extern "Java" fn Number::sum(l: Array[int, _]) -> int = "
    Int result = new Int(0);
    for (Int item : l) {
        result = (Int)result.add(item);
    }
    return result;
"

pub extern "Java" fn Natural::product(l: Array[nat, _]) -> nat = "
    Nat result = new Nat(1);
    for (Nat item : l) {
        result = (Nat)result.multiply(item);
    }
    return result;
"

pub extern "Java" fn Number::product(l: Array[int, _]) -> int = "
    Int result = new Int(1);
    for (Int item : l) {
        result = (Int)result.add(item);
    }
    return result;
"

pub extern "Java" fn reverse[T](l: Array[T, n]) -> Array[T, n] = "
    T[] output = (T[])new Object[l.length];
    for (int i = 0; i < l.length; i++) {
        output[i] = l[l.length - i - 1];
    }
    return output;
"

pub extern "Java" fn Mutable::reverse[T](l: mut Array[T, n]) = "
    java.util.List<T> list = java.util.Arrays.asList(l.get());
    java.util.Collections.reverse(list);
    l.set((T[])list.toArray());
"

pub extern "Java" fn zip[A,B](a: Array[A, _], b: Array[B, _]) -> Array[(A,B), _] = "
    int shortest = a.length < b.length ? a.length : b.length;
    Tuple2[] output = new Tuple2[shortest];
    for (int i = 0; i < shortest; i++) {
        output[i] = new Tuple2(a[i], b[i]);
    }
    return output;
"

pub extern "Java" fn unzip[A,B](l: Array[(A,B), _]) -> (Array[A, _], Array[B, _]) = "
    A[] a = (A[])new Object[l.length];
    B[] b = (B[])new Object[l.length];
    for (int i = 0; i < l.length; i++) {
        a[i] = l[i].a
        b[i] = l[i].b;
    }
    return new Tuple2(a, b);
"

pub extern "Java" fn zip3[A,B,C](a: Array[A, _], b: Array[B, _], c: Array[C, _]) -> Array[(A,B,C), _] = "
    int shortest = a.length < b.length ? a.length : b.length;
    shortest = shortest < c.length ? shortest : c.length;
    Tuple3[] output = new Tuple3[shortest];
    for (int i = 0; i < shortest; i++) {
        output[i] = new Tuple3(a[i], b[i], c[i]);
    }
    return output;
"

pub extern "Java" fn unzip3[A,B,C](l: Array[(A,B,C), _]) -> (Array[A, _], Array[B, _], Array[C, _]) = "
    A[] a = (A[])new Object[l.length];
    B[] b = (B[])new Object[l.length];
    C[] c = (C[])new Object[l.length];
    for (int i = 0; i < l.length; i++) {
        a[i] = l[i].a;
        b[i] = l[i].b;
        c[i] = l[i].c;
    }
    return new Tuple3(a, b, c);
"
