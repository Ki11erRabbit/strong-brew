module core::data::arraylist;

import core::data::fin;


pub struct Arraylist[T: type, N: nat] {
    array: Array[T, N],
    pub length: N,
}


pub extern "Java" fn Arraylist::(create[])[T](items: (...T)[T, N]) -> Arraylist[T, N] = "
    return new Arraylist(items, Nat.fromInt(items.length));
"

pub fn Arraylist::mut::(set[])(list: mut Arraylist[T, N], index: Fin[N], item: N) = {
    let Arraylist(array, length): (mut Array[T, N], N) = list
    array[index] = item
}

pub fn Arraylist::(get[])(list: Arraylist[T, N], index: Fin[N]) -> T = {
    return list.array[index]
}


pub fn Arraylist::(++)[T](list1: Arraylist[T, N], list2: Arraylist[T, M]) -> Arraylist[T, N + M] = {
    
}
